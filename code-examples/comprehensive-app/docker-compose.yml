# TaskForce Pro - Docker Compose Configuration
# For local development and testing

version: "3.8"

services:
  # PostgreSQL Database (Chapter 06)
  db:
    image: postgres:16-alpine
    container_name: taskforce_db
    environment:
      POSTGRES_USER: taskforce
      POSTGRES_PASSWORD: taskforce123
      POSTGRES_DB: taskforce_pro
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U taskforce"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache & Celery Broker (Chapters 09, 10)
  redis:
    image: redis:7-alpine
    container_name: taskforce_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MinIO (S3-compatible storage) (Chapter 08)
  minio:
    image: minio/minio:latest
    container_name: taskforce_minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000" # API
      - "9001:9001" # Console
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # FastAPI Application
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: taskforce_api
    command: uvicorn taskforce_pro.main:app --host 0.0.0.0 --port 8000 --reload
    environment:
      - APP_ENV=development
      - DEBUG=true
      - DATABASE_URL=postgresql+asyncpg://taskforce:taskforce123@db:5432/taskforce_pro
      - DATABASE_URL_SYNC=postgresql://taskforce:taskforce123@db:5432/taskforce_pro
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
      - AWS_ACCESS_KEY_ID=minioadmin
      - AWS_SECRET_ACCESS_KEY=minioadmin
      - AWS_S3_BUCKET=taskforce-pro
      - AWS_S3_ENDPOINT_URL=http://minio:9000
      - SECRET_KEY=dev-secret-key-change-in-production-min-32-chars
    ports:
      - "8000:8000"
    volumes:
      - ./taskforce_pro:/app/taskforce_pro
      - ./migrations:/app/migrations
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  # Celery Worker (Chapter 09)
  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: taskforce_celery_worker
    command: celery -A taskforce_pro.tasks.celery_app worker --loglevel=info
    environment:
      - APP_ENV=development
      - DATABASE_URL=postgresql+asyncpg://taskforce:taskforce123@db:5432/taskforce_pro
      - DATABASE_URL_SYNC=postgresql://taskforce:taskforce123@db:5432/taskforce_pro
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
    volumes:
      - ./taskforce_pro:/app/taskforce_pro
    depends_on:
      - redis
      - db
    restart: unless-stopped

  # Celery Beat (Scheduled Tasks) (Chapter 09)
  celery_beat:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: taskforce_celery_beat
    command: celery -A taskforce_pro.tasks.celery_app beat --loglevel=info
    environment:
      - APP_ENV=development
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
    volumes:
      - ./taskforce_pro:/app/taskforce_pro
    depends_on:
      - redis
    restart: unless-stopped

  # Flower (Celery Monitoring) (Chapter 09)
  flower:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: taskforce_flower
    command: celery -A taskforce_pro.tasks.celery_app flower --port=5555
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
    ports:
      - "5555:5555"
    depends_on:
      - redis
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  minio_data:
# Usage:
# 1. Start all services: docker-compose up -d
# 2. View logs: docker-compose logs -f api
# 3. Stop all: docker-compose down
# 4. Reset data: docker-compose down -v
#
# Access:
# - API: http://localhost:8000/docs
# - MinIO Console: http://localhost:9001 (minioadmin/minioadmin)
# - Flower (Celery): http://localhost:5555
# - PostgreSQL: localhost:5432 (taskforce/taskforce123)
# - Redis: localhost:6379

